Index: src/Comparator.java
===================================================================
diff --git a/src/Comparator.java b/src/Comparator.java
deleted file mode 100644
--- a/src/Comparator.java	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
+++ /dev/null	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
@@ -1,17 +0,0 @@
-import java.util.Comparator;
-
-/**
- * This comparator is used for soring different distance nodes in the priority queue. With this, when
- * adding nodes to the queue, they are automatically sorted by distance
- */
-class DistanceComparator implements Comparator<Node> {
-// Adapted from https://www.geeksforgeeks.org/implement-priorityqueue-comparator-java/
-	// Overriding compare() method of Comparator
-	public int compare(Node n1, Node n2) {
-		if (n1.distance > n2.distance)
-			return 1;
-		else if (n1.distance < n2.distance)
-			return -1;
-		return 0;
-	}
-}
\ No newline at end of file
Index: src/Node.java
===================================================================
diff --git a/src/Node.java b/src/Node.java
deleted file mode 100644
--- a/src/Node.java	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
+++ /dev/null	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
@@ -1,43 +0,0 @@
-import java.util.ArrayList;
-
-/**
- * Node class is an object used to hold information about each node in the graph
- */
-public class Node implements Cloneable{
-	int index; // an identifier for each node
-	int distance = Integer.MAX_VALUE; // a large number is initiated here for use by Dijkstra's
-	ArrayList<Edge> adjacentEdges = new ArrayList<Edge>(); // All edges with this node as origin
-	Node shortestPathPredecessor; // The node previous this on the shortest path found
-
-	Node(int i) {
-		index = i;
-	}
-
-	void addAdjacentEdge(Edge e) {
-		adjacentEdges.add(e);
-	}
-
-
-	/**
-	 * A recursive algorithm used in printing the shortest path to an algorithm once Dijkstra's has found it
-	 */
-	String tracePath(Node n) {
-		if (n.index == 1) { // Base case of the node being S
-			return "1";
-		}
-		else { // Recursive case
-			return tracePath(n.shortestPathPredecessor) + "-" + n.index;
-		}
-
-	}
-
-	@Override
-	public String toString() {
-		String toReturn = "Node " + index + " included in S. Distance: " + distance + ". Shortest path: " + tracePath(this);
-		toReturn = toReturn.replace('0','T');
-		toReturn = toReturn.replace('1','S');
-
-		return toReturn;
-
-	}
-}
Index: src/Edge.java
===================================================================
diff --git a/src/Edge.java b/src/Edge.java
deleted file mode 100644
--- a/src/Edge.java	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
+++ /dev/null	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
@@ -1,19 +0,0 @@
-/**
- * Edges connect a source and destination node with a weight
- */
-public class Edge {
-    int weight;
-    Node source;
-    Node destination;
-
-    Edge(Node s, Node d, int w) {
-        this.weight = w;
-        this.source = s;
-        this.destination = d;
-    }
-
-    @Override
-    public String toString() {
-        return source + " -> " + destination + ", " + weight;
-    }
-}
Index: src/main.java
===================================================================
diff --git a/src/main.java b/src/main.java
deleted file mode 100644
--- a/src/main.java	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
+++ /dev/null	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
@@ -1,18 +0,0 @@
-import java.util.ArrayList;
-
-public class main {
-    public static void main(String[] args) {
-        Dijkstra d = new Dijkstra();
-
-        // Create graph for this assignment
-        ArrayList<Node> graph = new ArrayList<Node>();
-        d.generateGraph(graph);
-
-        System.out.println("The graph is represented by a list containing node objects. " +
-                "This format most closely resembles an adjacency list.");
-
-        //Dijkstra's is run with S as the start node
-        d.shortestPath(graph, 1);
-
-    }
-}
Index: src/Dijkstra.java
===================================================================
diff --git a/src/Dijkstra.java b/src/Dijkstra.java
deleted file mode 100644
--- a/src/Dijkstra.java	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
+++ /dev/null	(revision 5a4eb2080a0ebfd92f0933a9a70d964c836bf84c)
@@ -1,131 +0,0 @@
-import java.util.*;
-
-public class Dijkstra {
-    // Using https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html
-    // This priority queue represents Q in the algorithm and prioritizes nodes based on their lowest adjacent edge
-    PriorityQueue<Node> nodesToDiscover = new PriorityQueue<Node>(new DistanceComparator());
-    ArrayList<Node> knownNodes = new ArrayList<Node>();
-    ArrayList<Node> unknownNodes = new ArrayList<Node>();
-
-
-    Dijkstra(){}
-
-    /**
-     * Implementation of Dijkstra's shortest-path algorithm
-     */
-    void shortestPath(ArrayList<Node> graph, int startNodeIndex) {
-        unknownNodes.addAll(graph); // used to know when to stop while loop
-
-        // Initialized start index values
-        graph.get(startNodeIndex).distance = 0;
-        changeKey(nodesToDiscover, graph.get(startNodeIndex), 0);
-
-        // Variables initialized to be used in while loop
-        Node currentNode;
-        Node nextNode;
-        int edgeWeight;
-
-
-        while(!unknownNodes.isEmpty()) {
-            currentNode = ExtractMin(nodesToDiscover);
-            knownNodes.add(currentNode);      // known nodes are nodes for which the shortest path is know
-            unknownNodes.remove(currentNode); // unknown nodes are nodes for which the shortest path is still yet to be determined
-
-            System.out.println(currentNode);
-
-            // Looks through all edges of current node
-            for (int i = 0; i < currentNode.adjacentEdges.size(); i++) {
-                nextNode = currentNode.adjacentEdges.get(i).destination;
-
-                // Only looks at edges connecting to unknown node
-                if (!knownNodes.contains(nextNode)) {
-                    edgeWeight = currentNode.adjacentEdges.get(i).weight;
-
-                    // If a shorter path is found
-                    if (currentNode.distance + edgeWeight < nextNode.distance) {
-                        // Updates nodes shortest path and predecessor
-                        nextNode.distance = currentNode.distance + edgeWeight;
-                        nextNode.shortestPathPredecessor = currentNode;
-
-                        changeKey(nodesToDiscover, nextNode, nextNode.distance);
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * Extract the minimum distance node connected to the known nodes
-     */
-    Node ExtractMin(PriorityQueue<Node> Q) {
-        Node toReturn = null;
-        boolean searchingForNode = true;
-        // A while loop is used so that a node that is known already isn't picked
-        while (searchingForNode) {
-            toReturn = Q.poll();
-            if (!knownNodes.contains(toReturn)) {
-                searchingForNode = false;
-            }
-        }
-        return toReturn;
-    }
-
-    /**
-     * Adds the node to the priority queue. This is done indiscriminately, meaning any node is added to the
-     * the priority queue when a new shorter path is found. The priority queue only sorts when nodes are
-     * added to it so we can add to it as long as we are sure to stop when all nodes are found.
-     */
-    void changeKey(PriorityQueue<Node> Q, Node w, int distance) {
-        nodesToDiscover.add(w);
-    }
-
-
-    /**
-     * Generates the graph used for this assignment
-     */
-     void generateGraph(ArrayList<Node> graph) {
-        // For the purposes of this list, node t is at index 0 and node s is at index 1
-         Node t = new Node(0);
-         Node s = new Node(1);
-         Node two = new Node(2);
-         Node three = new Node(3);
-         Node four = new Node(4);
-         Node five = new Node(5);
-         Node six = new Node(6);
-         Node seven = new Node(7);
-        graph.add(0, t); // Node T
-        graph.add(1, s); // Node T
-        graph.add(2, two); // Node T
-        graph.add(3, three); // Node T
-        graph.add(4, four); // Node T
-        graph.add(5, five); // Node T
-        graph.add(6, six); // Node T
-        graph.add(7, seven); // Node T
-
-         // Add adjacent edges to the nodes
-         s.addAdjacentEdge(new Edge(s,two,9));
-         s.addAdjacentEdge(new Edge(s,six,14));
-         s.addAdjacentEdge(new Edge(s,seven,15));
-
-         two.addAdjacentEdge(new Edge(two,three,23));
-
-         three.addAdjacentEdge(new Edge(three,t,19));
-         three.addAdjacentEdge(new Edge(three,five,2));
-
-         four.addAdjacentEdge(new Edge(four,three,6));
-         four.addAdjacentEdge(new Edge(four,t,6));
-
-         five.addAdjacentEdge(new Edge(five,four,11));
-         five.addAdjacentEdge(new Edge(five,t,16));
-
-         six.addAdjacentEdge(new Edge(six,three,18));
-         six.addAdjacentEdge(new Edge(six,five,30));
-         six.addAdjacentEdge(new Edge(six,seven,5));
-
-         seven.addAdjacentEdge(new Edge(seven,five,20));
-         seven.addAdjacentEdge(new Edge(seven,t,44));
-     }
-
-}
-
-
